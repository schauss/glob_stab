/*
    Copyright (C) 2017 Thomas Schauss

    This file is part of glob_stab.

    glob_stab is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    glob_stab is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with glob_stab. If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef BERNSTEIN2DPATCH_H
#define BERNSTEIN2DPATCH_H

#include <iostream>

#include "polygon.h"
#include "vec.hpp"
#include "iv.h"

/*!
 * \brief The Bernstein2dPatch class implements an inclusion check on the face of the parameter box.
 *
 * An arbitrary number of edges (which are of type Polygon or IvPolygon) are passed to the constructor. We can then use
 * these edges to check whether zero is included in the are surrounded by these edges. Therefore, the convex hull of
 * each edge is evaluated, and we check whether zero is included in the Polygon generated by connecting the corners
 * (i.e., the endpoints of the edges) and not included in any of the convex hulls of the edges.
 *
 * Note that in the case of Taylor Models we check whether the negative interval remainder is included instead of simply
 * the point zero!
 *
 * This algorithm evaluates zero-inclusion in a face using the algorithm presented in [Schauss, Peer, Buss, TAC 2017]
 * for Taylor Models.
 * This method is based on the algorithm introduced in  \cite Zettler1998.
 */
template <class T>
class Bernstein2dPatch
{
public:
    /*!
     * \brief Construct a Bernstein2dPatch.
     * \param edges Vector of edges (either Polygon or IvPolygon)
     */
    Bernstein2dPatch(Vec<T> &edges);
    //! Destructor.
    ~Bernstein2dPatch();

    /*!
     * \brief Check whether the given interval is completely included in the patch made up of the corners of the edges.
     * \param x Interval in x-direction (must include zero!)
     * \param y Interval in y-direction (must include zero!)
     */
    bool includes(const Iv &x, const Iv &y) const;
    //! Check whether zero is completely included in the patch made up of the corners of the edges.
    bool includesZero() const;

    /*!
     * \brief Check whether any of the edges totally or partially include the given interval.
     * \param x Interval in x-direction
     * \param y Interval in y-direction
     */
    bool edgesInclude(const Iv &x, const Iv &y) const;
    //! Check whether any of the edges include zero.
    bool edgesIncludeZero() const;

private:
    Vec<T> B; //!< Bernstein coefficients along the 4 edges
    Polygon R; //!< Polygon of the 4 corners connecting the edges

    static unsigned int count; //!< Counts how many Bernstein2dPatches were instantiated (never decreases)
    unsigned int id;           //!< Unique id of Bernstein2dPatch (set to count on construction)

    //! Stream operator for debug-output
    template <class U>
    friend std::ostream & operator<<(std::ostream &os, const Bernstein2dPatch<U>& b);
};

//! Stream operator for debug-output
template <class T>
std::ostream & operator<<(std::ostream &os, const Bernstein2dPatch<T>& b);

#endif // BERNSTEIN2DPATCH_H
